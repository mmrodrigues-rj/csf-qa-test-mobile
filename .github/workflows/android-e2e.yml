name: Android E2E

on:
  push:
    branches: [ main, ci-setup, feat/* ]
  pull_request:
    branches: [ main ]

# Cancela runs anteriores do mesmo workflow na mesma branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  ANDROID_APP_PATH: apps/android/native-demo-app.apk
  APPIUM_PORT: 4723

jobs:
  android-e2e:
    name: E2E on Android (Appium + Emulator)
    runs-on: macos-13        # <-- Intel (x86_64). Evita device offline em ARM64.
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Appium 3 + uiautomator2
      - name: Install Appium + Android driver
        run: |
          npm i -D appium@^3 --no-audit --no-fund
          npx appium -v
          npx appium driver install uiautomator2 || npx appium driver update uiautomator2
          echo "=== Drivers instalados ==="
          npx appium driver list --installed

      - name: Setup Java for Android tooling
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Emulador + testes
      - name: Run Android emulator and E2E tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64                # casa com macos-13 (Intel)
          profile: pixel_5
          disable-animations: true
          # Mais tolerante a boot: sem snapshot, sem boot anim, sem câmeras, GPU software
          emulator-options: >
            -no-snapshot -no-boot-anim -camera-back none -camera-front none
            -gpu swiftshader_indirect -memory 4096
          # Aumenta janela de boot (padrão é 600s). Aqui 900s.
          emulator-boot-timeout: 900
          script: |
            #!/bin/bash
            set -euo pipefail
            
            echo "▶ Emulador já pronto! Iniciando Appium..."
            npx appium --base-path / --port $APPIUM_PORT --log-level warn & APPIUM_PID=$!
            
            echo "▶ Aguardando Appium iniciar..."
            sleep 10
            
            # Verificar se Appium está respondendo
            for i in {1..30}; do
              if curl -sf "http://127.0.0.1:${APPIUM_PORT}/status" > /dev/null 2>&1; then
                echo "✓ Appium OK"
                break
              fi
              echo "Aguardando Appium ($i/30)..."
              sleep 2
              if [ $i -eq 30 ]; then
                echo "❌ Appium não iniciou"; kill $APPIUM_PID || true; exit 1
              fi
            done
            
            echo "▶ Executando testes E2E..."
            export PLATFORM=android
            export ANDROID_APP="$ANDROID_APP_PATH"
            npx wdio run ./wdio.conf.ts --spec ./tests/specs/00-smoke.install.spec.ts || TEST_STATUS=$?
            
            echo "▶ Encerrando Appium..."
            kill $APPIUM_PID || true

            exit ${TEST_STATUS:-0}

      - name: Upload artifacts (if present)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts-android
          path: |
            reports/**
            logs/**
            **/wdio-*.log
          if-no-files-found: ignore
